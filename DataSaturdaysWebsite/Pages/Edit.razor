@using Microsoft.AspNetCore.Components.Forms;
@using DataSaturdays.Core.Entities;
@using DataSaturdays.Core.Services;
@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Razor;
@using Microsoft.AspNetCore.Authorization;
@using System.Security.Claims;

@inject IEventService EventService
@inject IJSRuntime JSRuntime

@attribute [Authorize]

<EditForm EditContext="_editContext" OnValidSubmit="Save" class="row mr-5 ml-5">
        
    <div class="col-6 pt-3 offset-3 highlight">

        <!-- START OBLIGATORY -->
        <div data-view-component="true" class="Subhead Subhead--spacious col-6 offset-3">
            <h2 id="profile-settings-heading" data-view-component="true" class="Subhead-heading">Standard infos</h2>
        </div>

        <div class="row mt-lg-5">
                
            <div class="col-6">
                <div class="form-group">
                    <label for="txtName">Name</label>
                    <InputText class="form-control" title="Name" @bind-Value="Item.Name" placeholder="Enter event name" required/>
                </div>
            </div>
        

            <div class="col-4">
                <div class="form-group">
                    <label for="txtDate">Date</label>
                    <InputDate class="form-control" title="Date" @bind-Value="Item.Date" placeholder="Enter event date" required/>
                </div>
            </div>

            <div class="col-2">
                <div class="col align-content-center form-check">
                    <label for="checkboxVir" class="form-check-label"> Virtual</label>
                    <InputCheckbox type="checkbox" class="form-check-input checkbox-size mt-5 pt-md-5" @bind-Value="Item.Virtual" title="Virtual" id="checkboxVir"/>
                </div>
            </div>

            <div class="col-12 mt-3">
                <div class="form-group">
                    <label for="txtDescription">Description</label>
                    <InputTextArea type="text" class="form-control" title="Description" rows="10" @bind-Value="Item.Description" placeholder="Enter event description" required ></InputTextArea>
                </div>

            </div>
        </div>

    <br/>

        <div class="row">

            <div class="col-12">
                <div class="form-group">
                    <label for="urlReg">Registration URL</label>
                    <InputText type="url" class="form-control" title="RegURL" @bind-Value="Item.RegistrationURL" placeholder="Enter the registration URL"/>
                </div>
            </div>


            <div class="col-12">
                <div class="form-group">
                    <label for="urlCFS">Call For Speaker URL</label>
                    <InputText type="url" class="form-control" title="CFSURL" @bind-Value="Item.CallForSpeakersURL" placeholder="Enter the call for speaker URL"/>
                </div>
            </div>

            <div class="col-12">
                <div class="form-group">
                    <label for="urlSchedule">Schedule URL</label>
                    <InputText type="url" class="form-control" title="ScheduleURL" @bind-Value="Item.ScheduleURL" placeholder="Enter the schedule URL"/>
                </div>
            </div>

        </div>

    <br/>

        <div class="row">

            <div class="col-12">
                <div class="form-group">
                    <label for="urlSpeakerList">Speaker List URL</label>
                    <InputText type="url" class="form-control" title="SpeakerListURL" @bind-Value="Item.SpeakerListURL" placeholder="Enter the speaker list URL"/>
                </div>
            </div>


            <div class="col-12">
                <div class="form-group">
                    <label for="urlVolunteer">Volunteers URL</label>
                    <InputText type="url" class="form-control" title="VolURL" @bind-Value="Item.VolunteerRequestURL" placeholder="Enter the volunteer request URL"/>
                </div>
            </div>

            <div class="col-12">
                <div class="form-group">
                    <label for="urlMap">Venue Map URL</label>
                    <InputText type="url" class="form-control" title="VMapURL" @bind-Value="Item.VenueMap" placeholder="Enter the venue URL"/>
                </div>
            </div>

        </div>

    </div>

    <br/>

    <!-- START ORGANIZERS -->
    <div class="col-6 pt-5 offset-3 highlight">

        <div data-view-component="true" class="Subhead Subhead--spacious col-6 offset-3">
            <h2 id="profile-settings-heading" data-view-component="true" class="Subhead-heading">Organizers</h2>
        </div>

        @if (Item.Organizers?.Any() == true)
        {
            @foreach (var Org in Item.Organizers)
            {
                @if (!Org.ToDelete)
                {
                    <div class="row mt-lg-5">

                        <div class="col-3">
                            <div class="form-group">
                                <label for="txtOName">Organizer Name</label>
                                <InputText type="text" class="form-control" title="OName" @bind-Value="Org.Name" placeholder="Enter organizer name" required />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-group">
                                <label for="urlOEmail">Organizer email</label>
                                <InputText type="email" class="form-control" title="OrgEmail" @bind-Value="Org.Email" placeholder="Enter organizer email" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-group">
                                <label for="urlOTwitt">Organizer Twitter Tag</label>
                                <InputText type="text" class="form-control" title="OrgTwitt" @bind-Value="Org.Twitter" placeholder="Enter organizer tag" />
                            </div>
                        </div>

                        <div class="col-3 text-center d-flex justify-content-center align-items-center">
                            <button type="button" class="btn btn-danger mt-3 mr-3 align-content-center" onclick="@(() => DeleteOrganizerSection(Org))">Delete</button>
                        </div>

                    </div>
                }
            }
        }

        <div class="col-10 offset-1 text-center">
            <button type="button" class="btn btn-primary mt-3 mr-3 align-content-center" onclick="@(() => AddOrganizerSection())">Add Organizer</button>
        </div>

    </div>
    <!-- END ORGANIZERS -->

    <!-- END OBLIGATORY -->
        
    <br/>

    <!-- START MILESTONES -->
    <div class="col-6 pt-3 offset-3 highlight">

        <div data-view-component="true" class="Subhead Subhead--spacious col-6 offset-3">
            <h2 id="profile-settings-heading" data-view-component="true" class="Subhead-heading">Milestones</h2>
        </div>

        @if (Item.Milestones?.Any() == true)
        {
            @foreach (var Mil in Item.Milestones)
            {
                @if (!Mil.ToDelete)
                {
                <div class="row mt-lg-5">

                    <div class="col-3">
                        <div class="form-group">
                            <label for="txtMName">Milestone Name</label>
                            <InputText class="form-control" title="MName" @bind-Value="@Mil.Name" placeholder="Enter milestone name" required/>
                        </div>
                    </div>

                    <div class="col-3">
                        <div class="form-group">
                            <label for="txtMDate">Milestone Date</label>
                                <InputDate class="form-control" title="MDate" @bind-Value="@Mil.Date" placeholder="Enter milestone date"/>
                        </div>
                    </div>

                    <div class="col-3">
                        <div class="form-group">
                            <label for="txtMOrder">Milestone Order</label>
                                <InputText class="form-control" title="MOrder" @bind-Value="@Mil.Order" placeholder="Enter milestone order" required/>
                        </div>
                    </div>

                    <div class="col-3 text-center d-flex justify-content-center align-items-center">
                        <button type="button" class="btn btn-danger mt-3 mr-3 align-content-center" onclick="@(() => DeleteMileStoneSection(Mil))">Delete</button>
                    </div>

                </div>
                }
            }
        }

        <div class="col-10 offset-1 text-center">
            <button type="button" class="btn btn-primary mt-3 mr-3 align-content-center" onclick="@(() => AddMilestoneSection())">Add Milestone</button>             
        </div>

    </div>
    <!-- END MILESTONES -->

    <br/>

    <!-- START PRECONFERENCE -->
    <div class="col-6 pt-3 offset-3 highlight">

        <div data-view-component="true" class="Subhead Subhead--spacious col-6 offset-3">
            <h2 id="profile-settings-heading" data-view-component="true" class="Subhead-heading">Preconference</h2>
        </div>
        @if(Item.Precons?.Any() == true)
        {
            @foreach(var Pre in Item.Precons)
            {
                @if (!Pre.ToDelete)
                {
                    <div class="row mt-lg-5 border" style="border-radius: 10px">

                        <div class="col-12 mt-4">
                            <div class="form-group">
                                <label for="txtPName">Preconference Name</label>
                                <InputText class="form-control" title="PreconName" @bind-Value="@Pre.Name" placeholder="Enter preconference name" required/>
                            </div>
                        </div>

                        <div class="col-12 mt-3">
                            <div class="form-group">
                                <label for="txtPrecDescription">Preconference Description</label>
                                <InputTextArea class="form-control" title="Preconference Description" rows="8" @bind-Value="@Pre.Description" placeholder="Enter preconference description"></InputTextArea>
                            </div>
                        </div>

                        @if (Pre.Speakers?.Any() == true)
                        {
                            @foreach (var Speaker in Pre.Speakers)
                            {
                                @if (!Speaker.ToDelete)
                                {
                                    <div class="col-3">
                                        <div class="form-group">
                                            <label for="txtSName">Speaker Name</label>
                                            <InputText class="form-control" title="SName" @bind-Value="@Speaker.Name" placeholder="Enter speaker name" required/>
                                        </div>
                                    </div>

                                    <div class="col-3">
                                        <div class="form-group">
                                            <label for="urlSpeaker">Speaker URL</label>
                                            <InputText type="url" class="form-control" title="SURL" @bind-Value="@Pre.RegistrationUrl" placeholder="Enter speaker URL" />
                                        </div>
                                    </div>

                                    <div class="col-3">
                                        <div class="form-group">
                                            <label for="urlSpeakerimg">Speaker Image URL</label>
                                            <InputText type="url" class="form-control" title="SImgURL" @bind-Value="@Speaker.Image" placeholder="Enter image URL"/>
                                        </div>
                                    </div>

                                    <div class="col-1 text-center d-flex justify-content-center align-items-center">
                                        <button type="button" class="btn btn-danger mt-3 mr-3 align-content-center " onclick="@(() => DeleteSpeakerSection(Speaker))">X</button>
                                    </div>
                                }
                            }
                        }

                        @if (Pre.Speakers?.Where(x => x.ToDelete == false).Count() == 0)
                        {
                            <div class="col-12 text-center d-flex justify-content-center align-items-center">
                                <button type="button" class="btn btn-primary mt-3 mr-3 align-content-center" onclick="@(() => AddSpeakerSection(Pre))"> Add Speaker</button>
                            </div>
                        }else if(Pre.Speakers?.Where(x => x.ToDelete == false).Count() < 4)
                        {
                            <div class="col-1 text-center d-flex justify-content-center align-items-center">
                                <button type="button" class="btn btn-primary mt-3 mr-3 align-content-center" onclick="@(() => AddSpeakerSection(Pre))"> Add</button>
                            </div>
                        }
                    <div class="col-12 mb-4 text-center d-flex justify-content-center align-items-center">
                        <button type="button" class="btn mt-3 mr-3 align-content-center border-danger text-danger" onclick="@(() => DeletePreconSection(Pre))">Delete Preconference</button>
                    </div>
                    </div>
                }
            }
        }
        <div class="col-10 offset-1 text-center">
            <button type="button" class="btn btn-primary mt-3 mr-3 align-content-center" onclick="@(() => AddPreconSection())">Add Preconference</button>
        </div>
    </div>
    <!-- END PRECONFERENCE -->

    <br/>

    <!-- START SPONSORS -->
    <div class="col-6 pt-3 offset-3 highlight">
        <div data-view-component="true" class="Subhead Subhead--spacious col-6 offset-3">
            <h2 id="profile-settings-heading" data-view-component="true" class="Subhead-heading">Sponsors</h2>
        </div>
        <div class="col-12 mt-3">
            <div class="col align-content-center form-check">
                <label for="checkboxSponsorBens" class="form-check-label">Sponsor Benefits</label>
                <InputTextArea type="text" class="form-control" rows="5" @bind-Value="Item.SponsorBenefits" title="SponsorBenefits" placeholder="Enter description for the sponsors benefits"></InputTextArea>
            </div>
        </div>

        <div class="col-4">
            <div class="col text-center form-check">
                <InputCheckbox type="checkbox" class="form-check-input checkbox-size" @bind-Value="Item.SponsorMenuItem" title="SponsorMenu" id="checkboxSponsMen"/>
                <label for="checkboxVir" class="form-check-label">Sponsor Menu Item</label>
            </div>
        </div>

        @if (Item.Sponsors?.Any() == true)
        {
            @foreach (var Spon in Item.Sponsors)
            {
                @if (!Spon.ToDelete)
                {
                    <div class="row mt-lg-5">

                        <div class="col-3">
                            <div class="form-group">
                                <label for="txtSName">Sponsor Name</label>
                                <InputText class="form-control" title="SName" @bind-Value="@Spon.Name" placeholder="Enter sponsor name" required />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-group">
                                <label for="urlSImg">Sponsor Image</label>
                                <InputText class="form-control" title="SImg" @bind-Value="@Spon.ImageURL" placeholder="Enter image URL" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-group">
                               <label for="urlSLink">Sponsor Link</label>
                                <InputText type="url" class="form-control" title="SLink" @bind-Value="@Spon.LinkURL" placeholder="Enter sponsor URL" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-group">
                                <label for="txtSLevel">Sponsor Level</label>
                                <InputText class="form-control" title="SLevel" @bind-Value="@Spon.Level" placeholder="Enter sponsor level" />
                            </div>
                        </div>

                        <div class="col-10 offset-1 text-center d-flex justify-content-center align-items-center">
                            <button type="button" class="btn btn-danger mt-3 mr-3 align-content-center" onclick="@(() => DeleteSponsorSection(Spon))">Delete</button>
                        </div>

                    </div>
                } 
            }
        }
        <div class="col-10 offset-1 text-center">
            <button type="button" class="btn btn-primary mt-3 mr-3 align-content-center" onclick="@(() => AddSponsorSection())">Add Sponsor</button>
        </div>
    </div>
    <!-- END SPONSORS -->

    <br/>

    <!-- START VIRTUAL -->
    <div class="row mt-lg-5 mt-5 ">
        <div class="col-6 pt-3 offset-3 highlight">
            <div data-view-component="true" class="Subhead Subhead--spacious col-6 offset-3">
                <h2 id="profile-settings-heading" data-view-component="true" class="Subhead-heading">Rooms</h2>
            </div>

            @if (Item.Rooms?.Any() == true)
            {
                @foreach (var Room in Item.Rooms)
                {
                    @if (!Room.ToDelete)
                    {
                        <div class="row mt-lg-5">
                            <div class="col-4">
                                <div class="form-group">
                                    <label for="txtRName">Room Name</label>
                                    <InputText type="text" class="form-control" title="RName" @bind-Value="@Room.Name" placeholder="Enter Room Name" required />
                                </div>
                            </div>

                            <div class="col-4">
                                <div class="form-group">
                                    <label for="urlRoom">Room URL</label>
                                    <InputText type="text" class="form-control" title="RoomURL" @bind-Value="@Room.Name" placeholder="Enter room URL" />
                                </div>
                            </div>

                            <div class="col-4 text-center d-flex justify-content-center align-items-center">
                                <button type="button" class="btn btn-danger mt-3 mr-3 align-content-center" onclick="@(() => DeleteRoomSection(Room))">Delete</button>
                            </div>
                        </div>
                    }
                }
            }
            <div class="col-10 offset-1 text-center">
                    <button type="button" class="btn btn-primary mt-3 mr-3 align-content-center" id="addItemButton" onclick="@(() => AddRoomSection())">Add Room</button>
            </div>
        </div>
    </div>
    <!-- END VIRTUAL -->

    <br/>
    <!-- START OTHER -->
    <div class="col-6 pt-3 offset-3 highlight">
        <div data-view-component="true" class="Subhead Subhead--spacious col-6 offset-3">
            <h2 id="profile-settings-heading" data-view-component="true" class="Subhead-heading">Other</h2>
        </div>

        <div class="row mt-lg-5">

            <div class="col-4">
                <div class="col align-content-center form-check">
                    <InputCheckbox type="checkbox" class="form-check-input checkbox-size" @bind-Value="Item.HideTopLogo" title="HTL" id="checkboxHTL"/>
                    <label for="checkboxHTL" class="form-check-label">Hide top Logo</label>
                </div>
            </div>

            <div class="col-4">
                <div class="col align-content-center form-check">
                    <InputCheckbox type="checkbox" class="form-check-input checkbox-size" @bind-Value="Item.HideJoinRoom" title="HJR" id="checkboxHJR" />
                    <label for="checkboxHJR" class="form-check-label">Hide Join Rooms</label>
                </div>
            </div>

            <div class="col-4">
                <div class="col align-content-center form-check">
                    <InputCheckbox type="checkbox" class="form-check-input checkbox-size" @bind-Value="Item.OpenRegistrationNewTab" title="OpenRegNew" id="checkboxORNT" />
                    <label for="checkboxORNT" class="form-check-label">Open Registration in a new tab</label>
                </div>
            </div>

            <div class="col-12 mt-3">
                <div class="col align-content-center form-check">
                    <label for="checkboxCOC" class="form-check-label">Code of Conduct</label>
                    <InputTextArea type="text" class="form-control" rows="5" @bind-Value="Item.CodeOfConduct" title="COC" placeholder="Enter Code of Conduct"></InputTextArea>
                </div>
            </div>
            
            <div class="col-12 mt-3">
                <div class="col align-content-center form-check">
                    <label for="txtSDescription">Schedule Description</label>
                    <InputTextArea type="text" class="form-control" title="Schedule description" rows="5" @bind-Value="Item.ScheduleDescription" placeholder="Enter schedule description"></InputTextArea>
                </div>
            </div>

            <div class="col-12 mt-3">
                <div class="col align-content-center form-check">
                    <label for="txtScheduleApp">Schedule App URL</label>
                    <InputText type="text" class="form-control" title="Schedule App" @bind-Value="Item.ScheduleApp" placeholder="Enter schedule App URL" />
                </div>
            </div>

        </div>
    </div>
    <!-- END OTHER -->

    <div class="col-10 offset-1 text-center">      
       <button type="submit" class="btn btn-primary mt-3 mr-3 align-content-center">Save</button>
       <a class="btn btn-outline-primary mt-3 align-content-center" href="/Dashboard">Cancel</a>        
    </div>
    @if (IsSaved)
    {
        <div class="col-2 mt-4 border border-primary rounded text-center text-primary offset-5 d-flex justify-content-center align-items-center" style="height: 40px">
            Update successfull
        </div>
    }

</EditForm>

@code {
    [Parameter] public Guid Id { get; set; }
    [Parameter] public ClaimsPrincipal User { get; set; }

    public Event Item { get; set; } = new Event();

    private EditContext _editContext = new EditContext(new Event());

    private bool IsSaved { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Item = await EventService.GetEventByIdAsync(Id);

            if (Item == null)
            {
                Item = new Event();
            }

            _editContext = new EditContext(Item);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }


    protected async Task Save()
    {
        try
        {
            if (Item.Id.Equals(Guid.Empty))
            {
                await EventService.CreateEvent(Item);

                Organizer org = new Organizer
                    {
                        EventId = Item.Id,
                        Name = User.Identity.Name,
                        Email = User.Identity.Name
                };
                await EventService.CreateOrganizer(org);

                await JSRuntime.InvokeVoidAsync("history.back");
            }
            else
            {
                await EventService.UpdateEvent(Item);
                IsSaved = true;
            }

            if (Item.Milestones?.Any() == true)
            {
                foreach (var Mil in Item.Milestones)
                {
                    if (Mil.ToDelete)
                    {
                        await EventService.DeleteMilestone(Mil);
                    }
                    if (Mil.Id.Equals(Guid.Empty))
                    {
                        Mil.EventId = Item.Id;
                        await EventService.CreateMilestone(Mil);
                    }
                    else
                    {
                        await EventService.UpdateMilestone(Mil);
                    }
                }
            }
            
            if (Item.Organizers?.Any() == true)
            {
                foreach (var Org in Item.Organizers)
                {
                    if (Org.ToDelete)
                    {
                        await EventService.DeleteOrganizer(Org);
                    }
                    if (Org.Id.Equals(Guid.Empty))
                    {
                        Org.EventId = Item.Id;
                        await EventService.CreateOrganizer(Org);
                    }
                    else
                    {
                        await EventService.UpdateOrganizer(Org);
                    }
                }
            }

            if (Item.Rooms?.Any() == true)
            {
                foreach (var Roo in Item.Rooms)
                {
                    if (Roo.ToDelete)
                    {
                        await EventService.DeleteRoom(Roo);
                    }
                    if (Roo.Id.Equals(Guid.Empty))
                    {
                        Roo.EventId = Item.Id;
                        await EventService.CreateRoom(Roo);
                    }
                    else
                    {
                        await EventService.UpdateRoom(Roo);
                    }
                }
            }            

            if (Item.Sponsors?.Any() == true)
            {
                foreach (var Spo in Item.Sponsors)
                {
                    if (Spo.ToDelete)
                    {
                        await EventService.DeleteSponsor(Spo);
                    }
                    if (Spo.Id.Equals(Guid.Empty))
                    {
                        Spo.EventId = Item.Id;
                        await EventService.CreateSponsor(Spo);
                    }
                    else
                    {
                        await EventService.UpdateSponsor(Spo);
                    }
                }
            }            

            if (Item.Precons?.Any() == true)
            {
                foreach (var Pre in Item.Precons)
                {
                    if (Pre.ToDelete)
                    {
                        foreach (var Spe in Pre.Speakers)
                        {
                            await EventService.DeleteSpeaker(Spe);
                        }
                        await EventService.DeletePrecon(Pre);
                    }
                    if (Pre.Id.Equals(Guid.Empty))
                    {
                        Pre.EventId = Item.Id;
                        await EventService.CreatePrecon(Pre);
                        foreach(var Spe in Pre.Speakers)
                        {
                            if (!Spe.ToDelete)
                            {
                                Spe.PreconId = Pre.Id;
                                await EventService.CreateSpeaker(Spe);
                            }
                        }
                    }
                    else
                    {
                        await EventService.UpdatePrecon(Pre);
                        foreach(var Spe in Pre.Speakers)
                        {
                            if (Spe.ToDelete)
                            {
                                await EventService.DeleteSpeaker(Spe);
                            }
                            else
                            {
                                await EventService.UpdateSpeaker(Spe);
                            }
                        }
                    }
                }
            }                 

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    protected void AddMilestoneSection()
    {
        Milestone Mil = new Milestone();
        Item.Milestones?.Add(Mil);
    }

    protected void AddOrganizerSection()
    {
        Organizer Org = new Organizer();
        Item.Organizers?.Add(Org);
    }

    protected void AddRoomSection()
    {
        Room Roo = new Room();
        Item.Rooms?.Add(Roo);
    }    

    protected void AddPreconSection()
    {
        Preconference Pre = new Preconference();
        Item.Precons?.Add(Pre);
    }    

    protected void AddSponsorSection()
    {
        Sponsor Spo = new Sponsor();
        Item.Sponsors?.Add(Spo);
    }    

    protected void AddSpeakerSection(Preconference Pre)
    {
        Speaker Spe = new Speaker();
        Pre.Speakers?.Add(Spe);
        StateHasChanged();
    }

    protected void DeleteMileStoneSection(Milestone Mil)
    {
        Mil.ToDelete = true;
        StateHasChanged();
    }

    protected void DeleteOrganizerSection(Organizer Org)
    {
        Org.ToDelete = true;
        StateHasChanged();
    }

    protected void DeleteRoomSection(Room Roo)
    {
        Roo.ToDelete = true;
        StateHasChanged();
    }    

    protected void DeleteSponsorSection(Sponsor Spo)
    {
        Spo.ToDelete = true;
        StateHasChanged();
    }    

    protected void DeletePreconSection(Preconference Pre)
    {
        Pre.ToDelete = true;
        StateHasChanged();
    }    
    protected void DeleteSpeakerSection(Speaker Spe)
    {
        Spe.ToDelete = true;
        StateHasChanged();
    }
}
