@using DataSaturdays.Core.Entities
@using DataSaturdays.Core.Services
@using Microsoft.AspNetCore.Identity

@inject IEventService _eventService

<div class="row">
    <div class=" col-xl-8 offset-xl-2 col-lg-10 offset-lg-1 ">

        <h1 class="nav-item text-truncate text-center">
            <a class="btn btn-primary btn-xl text-uppercase js-scroll-trigger" href="/EventEdit/@Guid.Empty">
                CREATE EVENT
            </a>
        </h1>
        <p>You can only delete unpublished events</p>
        <div id="events-out" class="row align-content-center page-section">
            <div id="events">
                <h2 class="section-heading text-uppercase pt-4">My Events</h2>
            </div>
            <div class="row justify-content-center">
                <div class="col-auto">
                    <table table="" cellspacing="0" class="table-responsive table-striped table-hover mt-3 justify-content-center" id="Events" width="100%">
                        <thead>
                            <tr>
                                <th scope="col"></th>
                                <th scope="col">Event Name</th>
                                <th scope="col">Date</th>
                                <th scope="col"></th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Events != null && Events.Any())
                            {
                                @foreach (var item in Events.OrderByDescending(s => s.Date))
                                {
                                    <tr>
                                        <td>
                                            <div class="hero-box mt-3">
                                                <a href="@GetLink(item)">
                                                    <img src="assets/design/logo/10.png" height="65">
                                                </a>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="hero-box mt-3 flex-nowrap text-uppercase">
                                                <a href="@GetLink(item)">
                                                    <div class="nav-link">@item.Name</div>
                                                </a>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="hero-box mt-3 flex-nowrap">
                                                <div class="nav-link">@item.Date.ToString("dd MMMM yyyy")</div>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="hero-box">
                                                <button onclick="@(() => CloneEvent(item))"
                                                        class="btn btn-info">
                                                    Clone
                                                </button>
                                            </div>
                                        </td>
                                        <td>
                                            @if (!item.Published && item.Date > DateTime.UtcNow)
                                            {
                                                <div class="hero-box">
                                                    <button onclick="@(() => ShowConfirmation(item))"
                                                            class="btn btn-danger"
                                                            disabled="@(item.Date < DateTime.UtcNow)">
                                                    Delete
                                                </button>
                                            </div>
                                            }
                                            else
                                            {
                                                <div class="hero-box">
                                                    <button class="btn btn-secondary" disabled>Delete</button>
                                                </div>
                                            }
                                        </td>
                                        @if(IsAdmin)
                                        {
                                            @if (!item.Published)
                                            {
                                            <td>
                                                <div class="hero-box">
                                                    <button onclick="@(() => PublishEvent(true, item))"
                                                            class="btn btn-primary"
                                                            disabled="@(item.Date < DateTime.UtcNow)">
                                                        Publish
                                                    </button>
                                                </div>
                                            </td>
                                            }
                                            else
                                            {
                                            <td>
                                                <div class="hero-box">
                                                    <button onclick="@(() => PublishEvent(false, item))"
                                                            class="btn btn-secondary"
                                                            disabled="@(item.Date < DateTime.UtcNow)">
                                                        Published
                                                    </button>
                                                </div>
                                            </td>
                                            }
                                        }
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        @if (showDeletePopup)
        {
            <div class="modal" tabindex="-1" role="dialog" style="display: flex; align-items: center; background-color: rgba(0,0,0,0.5);">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Confirm Delete</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="@(() => ClosePopup())">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete this event?</p>
                            <p>You won't be able to recover deleted events.</p>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-primary" onclick="@(() => ConfirmDelete())">Yes</button>
                            <button class="btn btn-secondary" data-dismiss="modal" onclick="@(() => ClosePopup())">No</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string CurrentUser { get; set; }
    [Parameter] public bool IsAdmin { get; set; }
    private List<Event> Events = new List<Event>();
    private bool showDeletePopup = false;
    private Event toDelete { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        StateHasChanged();
    }
    private async Task LoadData()
    {
        try
        {
            if (IsAdmin)
            {
                Events.Clear();
                Events.AddRange(new List<Event>(await _eventService.GetEventsByAdmin()));
            }
            else
            {
                Events.Clear();
                Events.AddRange(new List<Event>(await _eventService.GetEventsByUserNameAsync(CurrentUser)));
            }
        }
        catch(Exception e)
        {

        }
    }
    private void ShowConfirmation(Event Eve)
    {
        toDelete = Eve;
        showDeletePopup = true;
        StateHasChanged();
    }
    private void ClosePopup()
    {
        toDelete = null;
        showDeletePopup = false;
        StateHasChanged();
    }
    private async void ConfirmDelete()
    {
        if (toDelete != null)
        {
            await _eventService.DeleteEvent(toDelete);
            toDelete = null;
            showDeletePopup = false;
            await LoadData();
            StateHasChanged();
        }
    }
    private async void PublishEvent(bool isPublished, Event Eve)
    {
        Eve.Published = isPublished;
        await _eventService.PublishEvent(Eve);
        await LoadData();
        StateHasChanged();
    }
    private async void CloneEvent(Event Eve)
    {
        await _eventService.CloneEvent(Eve); 
        await LoadData();
        StateHasChanged();
    }
    private string GetLink(Event Eve)
    {
        if (Eve.Date.AddDays(1) <= DateTime.UtcNow)
        {
            return "javascript:void(0);";
        }
        else
        {
            return $"/EventEdit/{Eve.Id}";
        }
    }
}
